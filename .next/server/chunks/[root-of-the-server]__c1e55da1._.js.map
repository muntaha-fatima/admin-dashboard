{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dell/admin%20dashborad/app/api/book/route.ts"],"sourcesContent":["// import { NextRequest, NextResponse } from \"next/server\";\r\n// import { writeFile, mkdir } from \"fs/promises\";\r\n// import { join } from \"path\";\r\n\r\n// const allowedOrigins = [\r\n//   \"https://frontend-rho-jet-76.vercel.app\",\r\n//   \"https://book-website-rho-sooty.vercel.app\",\r\n//   \"http://localhost:3000\",\r\n//   \"http://localhost:3001\",\r\n// ];\r\n\r\n// function getAllowOrigin(origin: string | null) {\r\n//   if (!origin) return \"\";\r\n//   if (process.env.NODE_ENV === \"development\") {\r\n//     console.log(\"üîß Dev mode - Allowing origin:\", origin);\r\n//     return origin;\r\n//   }\r\n//   if (allowedOrigins.includes(origin)) {\r\n//     console.log(\"‚úÖ Prod mode - Allowing origin:\", origin);\r\n//     return origin;\r\n//   }\r\n//   console.log(\"‚ùå Origin not allowed:\", origin);\r\n//   return \"\";\r\n// }\r\n\r\n// function withCORS(res: NextResponse, req: NextRequest) {\r\n//   const origin = req.headers.get(\"origin\");\r\n//   const allowOrigin = getAllowOrigin(origin);\r\n//   if (allowOrigin) {\r\n//     res.headers.set(\"Access-Control-Allow-Origin\", allowOrigin);\r\n//     res.headers.set(\"Vary\", \"Origin\");\r\n//   }\r\n//   res.headers.set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\r\n//   res.headers.set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n//   return res;\r\n// }\r\n\r\n// // Helper function to ensure a directory exists\r\n// async function ensureDirectoryExists(path: string) {\r\n//   try {\r\n//     await mkdir(path, { recursive: true });\r\n//     console.log(`‚úÖ Directory ensured: ${path}`);\r\n//   } catch (error) {\r\n//     console.error(`‚ùå Failed to create directory ${path}:`, error);\r\n//     throw error;\r\n//   }\r\n// }\r\n\r\n// export async function POST(req: NextRequest) {\r\n//   try {\r\n//     const data = await req.formData();\r\n//     const imageFile = data.get(\"image\") as File;\r\n//     const pdfFile = data.get(\"pdf\") as File;\r\n\r\n//     if (!imageFile || !pdfFile) {\r\n//       console.log(\"‚ùå Missing image or pdf file\");\r\n//       return withCORS(\r\n//         NextResponse.json({ success: false, message: \"Both image and pdf files are required\" }, { status: 400 }),\r\n//         req\r\n//       );\r\n//     }\r\n\r\n//     // Validate file types\r\n//     const validImageTypes = [\"image/jpeg\", \"image/png\", \"image/jpg\"];\r\n//     if (!validImageTypes.includes(imageFile.type)) {\r\n//       console.log(\"‚ùå Invalid image file type:\", imageFile.type);\r\n//       return withCORS(\r\n//         NextResponse.json({ success: false, message: \"Only JPEG or PNG images are allowed\" }, { status: 400 }),\r\n//         req\r\n//       );\r\n//     }\r\n//     if (pdfFile.type !== \"application/pdf\") {\r\n//       console.log(\"‚ùå Invalid pdf file type:\", pdfFile.type);\r\n//       return withCORS(\r\n//         NextResponse.json({ success: false, message: \"Only PDF files are allowed\" }, { status: 400 }),\r\n//         req\r\n//       );\r\n//     }\r\n\r\n//     const publicPath = join(process.cwd(), \"public\");\r\n//     const imageDir = join(publicPath, \"images\");\r\n//     const pdfDir = join(publicPath, \"pdfs\");\r\n\r\n//     // Ensure directories exist before saving files\r\n//     await ensureDirectoryExists(imageDir);\r\n//     await ensureDirectoryExists(pdfDir);\r\n\r\n//     // Get file extensions safely\r\n//     const getImageExtension = (name: string) => {\r\n//       const parts = name.split(\".\");\r\n//       return parts.length > 1 ? parts.pop() : \"jpeg\";\r\n//     };\r\n//     const getPdfExtension = (name: string) => {\r\n//       const parts = name.split(\".\");\r\n//       return parts.length > 1 ? parts.pop() : \"pdf\";\r\n//     };\r\n\r\n//     // Save image file\r\n//     const imageBytes = await imageFile.arrayBuffer();\r\n//     const imageBuffer = Buffer.from(imageBytes);\r\n//     const imageFileName = `book-image-${Date.now()}.${getImageExtension(imageFile.name)}`;\r\n//     const imageFilePath = join(imageDir, imageFileName);\r\n//     await writeFile(imageFilePath, imageBuffer);\r\n\r\n//     // Save pdf file\r\n//     const pdfBytes = await pdfFile.arrayBuffer();\r\n//     const pdfBuffer = Buffer.from(pdfBytes);\r\n//     const pdfFileName = `book-pdf-${Date.now()}.${getPdfExtension(pdfFile.name)}`;\r\n//     const pdfFilePath = join(pdfDir, pdfFileName);\r\n//     await writeFile(pdfFilePath, pdfBuffer);\r\n\r\n//     console.log(\"‚úÖ Files uploaded:\", { image: imageFileName, pdf: pdfFileName });\r\n//     return withCORS(\r\n//       NextResponse.json({\r\n//         success: true,\r\n//         message: \"Files uploaded successfully\",\r\n//         imageUrl: `/images/${imageFileName}`,\r\n//         pdfUrl: `/pdfs/${pdfFileName}`,\r\n//       }, { status: 201 }),\r\n//       req\r\n//     );\r\n//   } catch (error) {\r\n//     console.error(\"‚ùå Upload Error:\", error);\r\n//     return withCORS(NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 }), req);\r\n//   }\r\n// }\r\n\r\n// export async function OPTIONS(req: NextRequest) {\r\n//   console.log(\"üîÑ CORS Preflight request for Upload Files\");\r\n//   const res = new NextResponse(null, { status: 204 });\r\n//   return withCORS(res, req);\r\n// }"],"names":[],"mappings":"AAAA,2DAA2D;AAC3D,kDAAkD;AAClD,+BAA+B;AAE/B,2BAA2B;AAC3B,8CAA8C;AAC9C,iDAAiD;AACjD,6BAA6B;AAC7B,6BAA6B;AAC7B,KAAK;AAEL,mDAAmD;AACnD,4BAA4B;AAC5B,kDAAkD;AAClD,6DAA6D;AAC7D,qBAAqB;AACrB,MAAM;AACN,2CAA2C;AAC3C,6DAA6D;AAC7D,qBAAqB;AACrB,MAAM;AACN,kDAAkD;AAClD,eAAe;AACf,IAAI;AAEJ,2DAA2D;AAC3D,8CAA8C;AAC9C,gDAAgD;AAChD,uBAAuB;AACvB,mEAAmE;AACnE,yCAAyC;AACzC,MAAM;AACN,wFAAwF;AACxF,oFAAoF;AACpF,gBAAgB;AAChB,IAAI;AAEJ,kDAAkD;AAClD,uDAAuD;AACvD,UAAU;AACV,8CAA8C;AAC9C,mDAAmD;AACnD,sBAAsB;AACtB,qEAAqE;AACrE,mBAAmB;AACnB,MAAM;AACN,IAAI;AAEJ,iDAAiD;AACjD,UAAU;AACV,yCAAyC;AACzC,mDAAmD;AACnD,+CAA+C;AAE/C,oCAAoC;AACpC,oDAAoD;AACpD,yBAAyB;AACzB,oHAAoH;AACpH,cAAc;AACd,WAAW;AACX,QAAQ;AAER,6BAA6B;AAC7B,wEAAwE;AACxE,uDAAuD;AACvD,mEAAmE;AACnE,yBAAyB;AACzB,kHAAkH;AAClH,cAAc;AACd,WAAW;AACX,QAAQ;AACR,gDAAgD;AAChD,+DAA+D;AAC/D,yBAAyB;AACzB,yGAAyG;AACzG,cAAc;AACd,WAAW;AACX,QAAQ;AAER,wDAAwD;AACxD,mDAAmD;AACnD,+CAA+C;AAE/C,sDAAsD;AACtD,6CAA6C;AAC7C,2CAA2C;AAE3C,oCAAoC;AACpC,oDAAoD;AACpD,uCAAuC;AACvC,wDAAwD;AACxD,SAAS;AACT,kDAAkD;AAClD,uCAAuC;AACvC,uDAAuD;AACvD,SAAS;AAET,yBAAyB;AACzB,wDAAwD;AACxD,mDAAmD;AACnD,6FAA6F;AAC7F,2DAA2D;AAC3D,mDAAmD;AAEnD,uBAAuB;AACvB,oDAAoD;AACpD,+CAA+C;AAC/C,qFAAqF;AACrF,qDAAqD;AACrD,+CAA+C;AAE/C,oFAAoF;AACpF,uBAAuB;AACvB,4BAA4B;AAC5B,yBAAyB;AACzB,kDAAkD;AAClD,gDAAgD;AAChD,0CAA0C;AAC1C,6BAA6B;AAC7B,YAAY;AACZ,SAAS;AACT,sBAAsB;AACtB,+CAA+C;AAC/C,6GAA6G;AAC7G,MAAM;AACN,IAAI;AAEJ,oDAAoD;AACpD,+DAA+D;AAC/D,yDAAyD;AACzD,+BAA+B;AAC/B,IAAI","debugId":null}}]
}