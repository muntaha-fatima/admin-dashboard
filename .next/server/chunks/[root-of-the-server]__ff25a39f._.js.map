{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dell/admin%20dashborad/app/api/book/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { writeFile, mkdir } from \"fs/promises\";\r\nimport { join } from \"path\";\r\n\r\nconst allowedOrigins = [\r\n  \"https://frontend-rho-jet-76.vercel.app\",\r\n  \"https://book-website-rho-sooty.vercel.app\",\r\n  \"http://localhost:3000\",\r\n  \"http://localhost:3001\",\r\n];\r\n\r\nfunction getAllowOrigin(origin: string | null) {\r\n  if (!origin) return \"\";\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    console.log(\"üîß Dev mode - Allowing origin:\", origin);\r\n    return origin;\r\n  }\r\n  if (allowedOrigins.includes(origin)) {\r\n    console.log(\"‚úÖ Prod mode - Allowing origin:\", origin);\r\n    return origin;\r\n  }\r\n  console.log(\"‚ùå Origin not allowed:\", origin);\r\n  return \"\";\r\n}\r\n\r\nfunction withCORS(res: NextResponse, req: NextRequest) {\r\n  const origin = req.headers.get(\"origin\");\r\n  const allowOrigin = getAllowOrigin(origin);\r\n  if (allowOrigin) {\r\n    res.headers.set(\"Access-Control-Allow-Origin\", allowOrigin);\r\n    res.headers.set(\"Vary\", \"Origin\");\r\n  }\r\n  res.headers.set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\r\n  res.headers.set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n  return res;\r\n}\r\n\r\n// Helper function to ensure a directory exists\r\nasync function ensureDirectoryExists(path: string) {\r\n  try {\r\n    await mkdir(path, { recursive: true });\r\n    console.log(`‚úÖ Directory ensured: ${path}`);\r\n  } catch (error) {\r\n    console.error(`‚ùå Failed to create directory ${path}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const data = await req.formData();\r\n    const imageFile = data.get(\"image\") as File;\r\n    const pdfFile = data.get(\"pdf\") as File;\r\n\r\n    if (!imageFile || !pdfFile) {\r\n      console.log(\"‚ùå Missing image or pdf file\");\r\n      return withCORS(\r\n        NextResponse.json({ success: false, message: \"Both image and pdf files are required\" }, { status: 400 }),\r\n        req\r\n      );\r\n    }\r\n\r\n    // Validate file types\r\n    const validImageTypes = [\"image/jpeg\", \"image/png\", \"image/jpg\"];\r\n    if (!validImageTypes.includes(imageFile.type)) {\r\n      console.log(\"‚ùå Invalid image file type:\", imageFile.type);\r\n      return withCORS(\r\n        NextResponse.json({ success: false, message: \"Only JPEG or PNG images are allowed\" }, { status: 400 }),\r\n        req\r\n      );\r\n    }\r\n    if (pdfFile.type !== \"application/pdf\") {\r\n      console.log(\"‚ùå Invalid pdf file type:\", pdfFile.type);\r\n      return withCORS(\r\n        NextResponse.json({ success: false, message: \"Only PDF files are allowed\" }, { status: 400 }),\r\n        req\r\n      );\r\n    }\r\n\r\n    const publicPath = join(process.cwd(), \"public\");\r\n    const imageDir = join(publicPath, \"images\");\r\n    const pdfDir = join(publicPath, \"pdfs\");\r\n\r\n    // Ensure directories exist before saving files\r\n    await ensureDirectoryExists(imageDir);\r\n    await ensureDirectoryExists(pdfDir);\r\n\r\n    // Get file extensions safely\r\n    const getImageExtension = (name: string) => {\r\n      const parts = name.split(\".\");\r\n      return parts.length > 1 ? parts.pop() : \"jpeg\";\r\n    };\r\n    const getPdfExtension = (name: string) => {\r\n      const parts = name.split(\".\");\r\n      return parts.length > 1 ? parts.pop() : \"pdf\";\r\n    };\r\n\r\n    // Save image file\r\n    const imageBytes = await imageFile.arrayBuffer();\r\n    const imageBuffer = Buffer.from(imageBytes);\r\n    const imageFileName = `book-image-${Date.now()}.${getImageExtension(imageFile.name)}`;\r\n    const imageFilePath = join(imageDir, imageFileName);\r\n    await writeFile(imageFilePath, imageBuffer);\r\n\r\n    // Save pdf file\r\n    const pdfBytes = await pdfFile.arrayBuffer();\r\n    const pdfBuffer = Buffer.from(pdfBytes);\r\n    const pdfFileName = `book-pdf-${Date.now()}.${getPdfExtension(pdfFile.name)}`;\r\n    const pdfFilePath = join(pdfDir, pdfFileName);\r\n    await writeFile(pdfFilePath, pdfBuffer);\r\n\r\n    console.log(\"‚úÖ Files uploaded:\", { image: imageFileName, pdf: pdfFileName });\r\n    return withCORS(\r\n      NextResponse.json({\r\n        success: true,\r\n        message: \"Files uploaded successfully\",\r\n        imageUrl: `/images/${imageFileName}`,\r\n        pdfUrl: `/pdfs/${pdfFileName}`,\r\n      }, { status: 201 }),\r\n      req\r\n    );\r\n  } catch (error) {\r\n    console.error(\"‚ùå Upload Error:\", error);\r\n    return withCORS(NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 }), req);\r\n  }\r\n}\r\n\r\nexport async function OPTIONS(req: NextRequest) {\r\n  console.log(\"üîÑ CORS Preflight request for Upload Files\");\r\n  const res = new NextResponse(null, { status: 204 });\r\n  return withCORS(res, req);\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}