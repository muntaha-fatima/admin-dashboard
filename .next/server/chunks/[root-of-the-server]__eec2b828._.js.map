{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/dell/admin%20dashborad/app/api/booklibrary/route.ts"],"sourcesContent":["\r\n\r\n// import { type NextRequest, NextResponse } from \"next/server\"\r\n// import { connectToDatabase } from \"@/lib/mongodb\"\r\n// import { Book } from \"@/models/Book\"\r\n// import { Promo } from \"@/models/promoimage\"\r\n\r\n// // ‚úÖ Allowed origins (Prod only)\r\n// const allowedOrigins = [\r\n//   \"https://frontend-rho-jet-76.vercel.app\", // Admin Dashboard (deployed)\r\n//   \"https://book-website-rho-sooty.vercel.app\", // Book Website (deployed)\r\n//   \"http://localhost:3000\",\r\n//   \"http://localhost:3001\",\r\n// ]\r\n\r\n// // ‚úÖ Utility: decide which origin to allow\r\n// function getAllowOrigin(origin: string | null) {\r\n//   if (!origin) return \"\" // No CORS header for non-browser/server-to-server\r\n//   // Allow all origins in development\r\n//   if (process.env.NODE_ENV === \"development\") {\r\n//     console.log(\"üîß Dev mode - Allowing origin:\", origin)\r\n//     return origin\r\n//   }\r\n//   // Strict check for production\r\n//   if (allowedOrigins.includes(origin)) {\r\n//     console.log(\"‚úÖ Prod mode - Allowing origin:\", origin)\r\n//     return origin\r\n//   }\r\n//   console.log(\"‚ùå Origin not allowed:\", origin)\r\n//   return \"\"\r\n// }\r\n\r\n// // ‚úÖ CORS helper\r\n// function withCORS(res: NextResponse, req: NextRequest) {\r\n//   const origin = req.headers.get(\"origin\")\r\n//   const allowOrigin = getAllowOrigin(origin)\r\n//   if (allowOrigin) {\r\n//     res.headers.set(\"Access-Control-Allow-Origin\", allowOrigin)\r\n//     res.headers.set(\"Vary\", \"Origin\")\r\n//   }\r\n//   res.headers.set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\")\r\n//   res.headers.set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\")\r\n//   return res\r\n// }\r\n\r\n// // ‚úÖ Helper: Get proper host and protocol\r\n// function getBaseUrl(req: NextRequest) {\r\n//   const host = req.headers.get(\"host\")\r\n//   const isDevelopment = process.env.NODE_ENV === \"development\"\r\n//   if (isDevelopment) {\r\n//     // Local development\r\n//     const protocol = \"http\"\r\n//     const finalHost = host || \"localhost:3000\"\r\n//     console.log(\"üîß Dev Base URL:\", `${protocol}://${finalHost}`)\r\n//     return { protocol, host: finalHost }\r\n//   } else {\r\n//     // Production\r\n//     const protocol = req.headers.get(\"x-forwarded-proto\") || \"https\"\r\n//     const finalHost = host || \"frontend-rho-jet-76.vercel.app\"\r\n//     console.log(\"üöÄ Prod Base URL:\", `${protocol}://${finalHost}`)\r\n//     return { protocol, host: finalHost }\r\n//   }\r\n// }\r\n\r\n// // ‚úÖ Helper: Convert relative URLs to absolute\r\n// function makeAbsoluteUrl(url: string | undefined, baseProtocol: string, baseHost: string) {\r\n//   if (!url) return \"\"\r\n//   // Already absolute URL\r\n//   if (url.startsWith(\"http\")) {\r\n//     return url\r\n//   }\r\n//   // Make relative URL absolute\r\n//   const absoluteUrl = `${baseProtocol}://${baseHost}${url.startsWith(\"/\") ? url : \"/\" + url}`\r\n//   console.log(\"üîó Converting URL:\", url, \"‚Üí\", absoluteUrl)\r\n//   return absoluteUrl\r\n// }\r\n\r\n// // ‚úÖ OPTIONS (preflight)\r\n// export async function OPTIONS(req: NextRequest) {\r\n//   console.log(\"üîÑ CORS Preflight request\")\r\n//   const res = new NextResponse(null, { status: 204 })\r\n//   return withCORS(res, req)\r\n// }\r\n\r\n// export async function GET(req: NextRequest) {\r\n//   try {\r\n//     console.log(\"üìñ GET Books and Promo request\")\r\n//     await connectToDatabase()\r\n//     const { searchParams } = new URL(req.url)\r\n//     const isFeatured = searchParams.get(\"featured\")\r\n//     const purpose = searchParams.get(\"purpose\") // üîç 'book', 'promo', or null (both)\r\n\r\n//     const { protocol, host } = getBaseUrl(req)\r\n\r\n//     let allItems: any[] = []\r\n\r\n//     if (purpose === \"promo\") {\r\n//       // ‚úÖ Only promo images\r\n//       const promoImages = await Promo.find({ isActive: true }).sort({ createdAt: -1 }).limit(1)\r\n//       console.log(\"üîç Promo Images fetched from DB:\", promoImages)\r\n//       allItems = promoImages.map((item: any) => ({\r\n//         _id: item._id,\r\n//         promoImageUrl: makeAbsoluteUrl(item.promoImageUrl, protocol, host),\r\n//         contentType: \"image\",\r\n//         isFeatured: item.isActive,\r\n//       }))\r\n//     } else if (purpose === \"book\") {\r\n//       // ‚úÖ Only books\r\n//       const bookFilter = isFeatured === \"true\" ? { isFeatured: true } : {}\r\n//       const books = await Book.find(bookFilter).sort({ createdAt: -1 })\r\n//       allItems = books.map((book: any) => {\r\n//         const bookObj = book.toObject()\r\n//         return {\r\n//           ...bookObj,\r\n//           imageUrl: makeAbsoluteUrl(bookObj.imageUrl, protocol, host),\r\n//           pdfUrl: makeAbsoluteUrl(bookObj.pdfUrl, protocol, host),\r\n//           contentType: \"book\",\r\n//         }\r\n//       })\r\n//     } else {\r\n//       // ‚úÖ Default: Both books and promo images\r\n//       const bookFilter = isFeatured === \"true\" ? { isFeatured: true } : {}\r\n//       const books = await Book.find(bookFilter).sort({ createdAt: -1 })\r\n//       const booksWithFullUrl = books.map((book: any) => {\r\n//         const bookObj = book.toObject()\r\n//         return {\r\n//           ...bookObj,\r\n//           imageUrl: makeAbsoluteUrl(bookObj.imageUrl, protocol, host),\r\n//           pdfUrl: makeAbsoluteUrl(bookObj.pdfUrl, protocol, host),\r\n//           contentType: \"book\",\r\n//         }\r\n//       })\r\n\r\n//       const promoImages = await Promo.find({ isActive: true }).sort({ createdAt: -1 })\r\n\r\n//       const promoImagesWithFullUrl = promoImages.map((item: any) => ({\r\n//         _id: item._id,\r\n//         promoImageUrl: makeAbsoluteUrl(item.promoImageUrl, protocol, host),\r\n//         contentType: \"image\",\r\n//         isFeatured: item.isActive,\r\n//       }))\r\n\r\n//       allItems = [...booksWithFullUrl, ...promoImagesWithFullUrl]\r\n//     }\r\n\r\n//     console.log(\"‚úÖ Returning\", allItems.length, \"items\")\r\n//     const res = NextResponse.json(allItems, { status: 200 })\r\n//     return withCORS(res, req)\r\n//   } catch (error) {\r\n//     console.error(\"‚ùå GET Error:\", error)\r\n//     const res = NextResponse.json({ message: \"Server Error\" }, { status: 500 })\r\n//     return withCORS(res, req)\r\n//   }\r\n// }\r\n\r\n// export async function POST(req: NextRequest) {\r\n//   await connectToDatabase()\r\n//   const data = await req.json()\r\n\r\n//   try {\r\n//     const { protocol, host } = getBaseUrl(req) // Get base URL for absolute paths\r\n\r\n//     if (data.contentType === \"image\") {\r\n//       // üëâ Promo data\r\n//       const promo = new Promo({\r\n//   promoImageUrl: makeAbsoluteUrl(data.promoImageUrl, protocol, host),\r\n//   isActive: data.isFeatured !== undefined ? data.isFeatured : true, // ‚úÖ Yeh line add karo\r\n// })\r\n\r\n//       await promo.save()\r\n//       return NextResponse.json({ success: true, message: \"Promo added\", promo })\r\n//     } else if (data.contentType === \"book\") {\r\n//       // üëâ Book data\r\n//       const book = new Book({\r\n//         title: data.title,\r\n//         author: data.author,\r\n//         description: data.description,\r\n//         imageUrl: makeAbsoluteUrl(data.imageUrl, protocol, host),\r\n//         pdfUrl: makeAbsoluteUrl(data.pdfUrl, protocol, host),\r\n//         isFeatured: data.isFeatured,\r\n//         contentType: \"book\",\r\n//       })\r\n//       await book.save()\r\n//       return NextResponse.json({ success: true, message: \"Book added\", book })\r\n//     } else {\r\n//       return NextResponse.json({ success: false, message: \"Invalid data\" }, { status: 400 })\r\n//     }\r\n//   } catch (err) {\r\n//     console.error(err)\r\n//     return NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 })\r\n//   }\r\n// }\r\n\r\n// // ‚úÖ PUT handler (for updating books and promo images)\r\n// export async function PUT(req: NextRequest) {\r\n//   try {\r\n//     console.log(\"‚úèÔ∏è PUT request\")\r\n//     await connectToDatabase()\r\n//     const { searchParams } = new URL(req.url)\r\n//     const id = searchParams.get(\"id\")\r\n\r\n//     if (!id) {\r\n//       console.log(\"‚ùå Missing entry ID for update\")\r\n//       const res = NextResponse.json({ message: \"Missing entry ID\" }, { status: 400 })\r\n//       return withCORS(res, req)\r\n//     }\r\n\r\n//     const body = await req.json()\r\n//     const { contentType, title, author, description, imageUrl, pdfUrl, promoImageUrl, isFeatured } = body\r\n\r\n//     console.log(\"üìù Received data for PUT:\", { id, contentType, title, promoImageUrl, isFeatured })\r\n\r\n//     const { protocol, host } = getBaseUrl(req)\r\n\r\n//     if (contentType === \"book\") {\r\n//       const updatedData = {\r\n//         title,\r\n//         author,\r\n//         description,\r\n//         imageUrl: makeAbsoluteUrl(imageUrl, protocol, host),\r\n//         pdfUrl: makeAbsoluteUrl(pdfUrl, protocol, host),\r\n//         isFeatured,\r\n//         contentType: \"book\",\r\n//       }\r\n//       console.log(\"üíæ Updating Book entry with processed data:\", updatedData)\r\n//       const updatedBook = await Book.findByIdAndUpdate(id, updatedData, {\r\n//         new: true,\r\n//         runValidators: true,\r\n//       })\r\n\r\n//       if (!updatedBook) {\r\n//         console.log(\"‚ùå Book entry not found for update:\", id)\r\n//         const res = NextResponse.json({ message: \"Book entry not found\" }, { status: 404 })\r\n//         return withCORS(res, req)\r\n//       }\r\n\r\n//       console.log(\"‚úÖ Book entry updated successfully:\", updatedBook._id)\r\n//       const res = NextResponse.json(updatedBook, { status: 200 })\r\n//       return withCORS(res, req)\r\n//     } else if (contentType === \"image\") {\r\n//       const updatedData = {\r\n//         promoImageUrl: makeAbsoluteUrl(promoImageUrl, protocol, host),\r\n//         isActive: isFeatured, // Use isFeatured from form as isActive for Promo model\r\n//       }\r\n//       console.log(\"üíæ Updating Promo entry with processed data:\", updatedData)\r\n//       const updatedPromo = await Promo.findByIdAndUpdate(id, updatedData, {\r\n//         new: true,\r\n//         runValidators: true,\r\n//       })\r\n\r\n//       if (!updatedPromo) {\r\n//         console.log(\"‚ùå Promo entry not found for update:\", id)\r\n//         const res = NextResponse.json({ message: \"Promo entry not found\" }, { status: 404 })\r\n//         return withCORS(res, req)\r\n//       }\r\n\r\n//       console.log(\"‚úÖ Promo entry updated successfully:\", updatedPromo._id)\r\n//       const res = NextResponse.json(updatedPromo, { status: 200 })\r\n//       return withCORS(res, req)\r\n//     } else {\r\n//       throw new Error(\"Invalid contentType provided. Must be 'book' or 'image'.\")\r\n//     }\r\n//   } catch (error) {\r\n//     console.error(\"‚ùå PUT Error:\", error)\r\n//     const res = NextResponse.json({ message: \"Server Error\" }, { status: 500 })\r\n//     return withCORS(res, req)\r\n//   }\r\n// }\r\n\r\n// // ‚úÖ DELETE handler\r\n// export async function DELETE(req: NextRequest) {\r\n//   try {\r\n//     console.log(\"üóëÔ∏è DELETE request\")\r\n//     await connectToDatabase()\r\n//     const { searchParams } = new URL(req.url)\r\n//     const id = searchParams.get(\"id\")\r\n//     const type = searchParams.get(\"type\") // Added type to distinguish between Book and Promo deletion\r\n\r\n//     if (!id) {\r\n//       console.log(\"‚ùå Missing ID for delete\")\r\n//       const res = NextResponse.json({ message: \"Missing ID\" }, { status: 400 })\r\n//       return withCORS(res, req)\r\n//     }\r\n\r\n//     let deletedEntry\r\n\r\n//     if (type === \"book\") {\r\n//       console.log(\"üîç Deleting book with ID:\", id)\r\n//       deletedEntry = await Book.findByIdAndDelete(id)\r\n//     } else if (type === \"promo\") {\r\n//       console.log(\"üîç Deleting promo with ID:\", id)\r\n//       deletedEntry = await Promo.findByIdAndDelete(id)\r\n//     } else {\r\n//       // If type is not specified, try deleting from both for robustness\r\n//       console.log(\"üîç Deleting entry (type not specified, trying both models) with ID:\", id)\r\n//       deletedEntry = await Book.findByIdAndDelete(id)\r\n//       if (!deletedEntry) {\r\n//         deletedEntry = await Promo.findByIdAndDelete(id) // Try promo if not found in books\r\n//       }\r\n//     }\r\n\r\n//     if (!deletedEntry) {\r\n//       console.log(\"‚ùå Entry not found for deletion:\", id)\r\n//       const res = NextResponse.json({ message: \"Entry not found\" }, { status: 404 })\r\n//       return withCORS(res, req)\r\n//     }\r\n\r\n//     console.log(\"‚úÖ Entry deleted successfully:\", id)\r\n//     const res = NextResponse.json({ message: \"Entry deleted successfully\" }, { status: 200 })\r\n//     return withCORS(res, req)\r\n//   } catch (error) {\r\n//     console.error(\"‚ùå DELETE Error:\", error)\r\n//     const res = NextResponse.json({ message: \"Server Error\" }, { status: 500 })\r\n//     return withCORS(res, req)\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n// import { NextRequest, NextResponse } from \"next/server\";\r\n// import { connectToDatabase } from \"@/lib/mongodb\";\r\n// import { Book } from \"../../../models/book\";\r\n// import { Promo } from \"../../../models/promoimage\";\r\n\r\n// // Allowed origins\r\n// const allowedOrigins = [\r\n//   \"https://frontend-rho-jet-76.vercel.app\",\r\n//   \"https://book-website-rho-sooty.vercel.app\",\r\n//   \"http://localhost:3000\",\r\n//   \"http://localhost:3001\",\r\n// ];\r\n\r\n// function getAllowOrigin(origin: string | null) {\r\n//   if (!origin) return \"\";\r\n//   if (process.env.NODE_ENV === \"development\") {\r\n//     console.log(\"üîß Dev mode - Allowing origin:\", origin);\r\n//     return origin;\r\n//   }\r\n//   if (allowedOrigins.includes(origin)) {\r\n//     console.log(\"‚úÖ Prod mode - Allowing origin:\", origin);\r\n//     return origin;\r\n//   }\r\n//   console.log(\"‚ùå Origin not allowed:\", origin);\r\n//   return \"\";\r\n// }\r\n\r\n// function withCORS(res: NextResponse, req: NextRequest) {\r\n//   const origin = req.headers.get(\"origin\");\r\n//   const allowOrigin = getAllowOrigin(origin);\r\n//   if (allowOrigin) {\r\n//     res.headers.set(\"Access-Control-Allow-Origin\", allowOrigin);\r\n//     res.headers.set(\"Vary\", \"Origin\");\r\n//   }\r\n//   res.headers.set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\r\n//   res.headers.set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n//   return res;\r\n// }\r\n\r\n// function getBaseUrl(req: NextRequest) {\r\n//   const host = req.headers.get(\"host\");\r\n//   const isDevelopment = process.env.NODE_ENV === \"development\";\r\n//   if (isDevelopment) {\r\n//     const protocol = \"http\";\r\n//     const finalHost = host || \"\";\r\n//     console.log(\"üîß Dev Base URL:\", `${protocol}://${finalHost}`);\r\n//     return { protocol, host: finalHost };\r\n//   } else {\r\n//     const protocol = req.headers.get(\"x-forwarded-proto\") || \"https\";\r\n//     const finalHost = host || \"frontend-rho-jet-76.vercel.app\";\r\n//     console.log(\"üöÄ Prod Base URL:\", `${protocol}://${finalHost}`);\r\n//     return { protocol, host: finalHost };\r\n//   }\r\n// }\r\n\r\n// function makeAbsoluteUrl(url: string | undefined, baseProtocol: string, baseHost: string) {\r\n//   if (!url || url.trim() === \"\") {\r\n//     console.log(\"‚ùå Invalid URL:\", url);\r\n//     return \"\";\r\n//   }\r\n//   if (url.startsWith(\"http\")) {\r\n//     return url;\r\n//   }\r\n//   const absoluteUrl = `${baseProtocol}://${baseHost}${url.startsWith(\"/\") ? url : \"/\" + url}`;\r\n//   console.log(\"üîó Converting URL:\", url, \"‚Üí\", absoluteUrl);\r\n//   return absoluteUrl;\r\n// }\r\n\r\n// export async function OPTIONS(req: NextRequest) {\r\n//   console.log(\"üîÑ CORS Preflight request for Admin Content\");\r\n//   const res = new NextResponse(null, { status: 204 });\r\n//   return withCORS(res, req);\r\n// }\r\n\r\n// export async function POST(req: NextRequest) {\r\n//   try {\r\n//     console.log(\"üìñ POST Admin Content request\");\r\n//     await connectToDatabase();\r\n\r\n//     const data = await req.json();\r\n//     const { contentType } = data;\r\n//     const { protocol, host } = getBaseUrl(req);\r\n\r\n//     // ‚ö†Ô∏è Validate contentType\r\n//     if (!contentType || (contentType !== \"book\" && contentType !== \"image\")) {\r\n//       console.log(\"‚ùå Invalid contentType:\", contentType);\r\n//       return withCORS(\r\n//         NextResponse.json({ success: false, message: \"Invalid contentType: must be 'book' or 'image'\" }, { status: 400 }),\r\n//         req\r\n//       );\r\n//     }\r\n\r\n//     // üìö Book Content Handling\r\n//     if (contentType === \"book\") {\r\n//       const { title, author, description, imageUrl, pdfUrl, isFeatured } = data;\r\n//       if (!title || !author || !description || !imageUrl || !pdfUrl || isFeatured === undefined) {\r\n//         console.log(\"‚ùå Missing required book fields:\", { title, author, description, imageUrl, pdfUrl, isFeatured });\r\n//         return withCORS(\r\n//           NextResponse.json(\r\n//             { success: false, message: \"Missing required book fields: title, author, description, imageUrl, pdfUrl, isFeatured\" },\r\n//             { status: 400 }\r\n//           ),\r\n//           req\r\n//         );\r\n//       }\r\n//       const absoluteImageUrl = makeAbsoluteUrl(imageUrl, protocol, host);\r\n//       const absolutePdfUrl = makeAbsoluteUrl(pdfUrl, protocol, host);\r\n//       if (!absoluteImageUrl || !absolutePdfUrl) {\r\n//         console.log(\"‚ùå Invalid book URLs:\", { imageUrl, pdfUrl });\r\n//         return withCORS(\r\n//           NextResponse.json(\r\n//             { success: false, message: \"Invalid imageUrl or pdfUrl for book\" },\r\n//             { status: 400 }\r\n//           ),\r\n//           req\r\n//         );\r\n//       }\r\n//       const book = new Book({\r\n//         title: title.trim(),\r\n//         author: author.trim(),\r\n//         description: description.trim(),\r\n//         imageUrl: absoluteImageUrl,\r\n//         pdfUrl: absolutePdfUrl,\r\n//         isFeatured: !!isFeatured,\r\n//         contentType: \"book\",\r\n//       });\r\n//       await book.save();\r\n//       console.log(\"‚úÖ Book added:\", book._id);\r\n//       return withCORS(\r\n//         NextResponse.json({ success: true, message: \"Book added successfully\", item: book }, { status: 201 }),\r\n//         req\r\n//       );\r\n//     }\r\n\r\n//     // üñºÔ∏è Promo Image Handling\r\n//     if (contentType === \"image\") {\r\n//       const { promoImageUrl, isFeatured, title } = data;\r\n//       if (!promoImageUrl || typeof promoImageUrl !== \"string\" || promoImageUrl.trim() === \"\") {\r\n//         console.log(\"‚ùå Invalid or missing promoImageUrl:\", promoImageUrl);\r\n//         return withCORS(\r\n//           NextResponse.json(\r\n//             { success: false, message: \"promoImageUrl is required and must be a valid non-empty string\" },\r\n//             { status: 400 }\r\n//           ),\r\n//           req\r\n//         );\r\n//       }\r\n//       if (isFeatured === undefined) {\r\n//         console.log(\"‚ùå Missing isFeatured for promo image\");\r\n//         return withCORS(\r\n//           NextResponse.json({ success: false, message: \"isFeatured is required for promo images\" }, { status: 400 }),\r\n//           req\r\n//         );\r\n//       }\r\n//       // Prevent book-related fields in promo\r\n//       if (data.imageUrl || data.pdfUrl || data.author || data.description) {\r\n//         console.log(\"‚ùå Book fields detected in promo request:\", { imageUrl: data.imageUrl, pdfUrl: data.pdfUrl });\r\n//         return withCORS(\r\n//           NextResponse.json(\r\n//             { success: false, message: \"Book fields (imageUrl, pdfUrl, author, description) not allowed in promo request\" },\r\n//             { status: 400 }\r\n//           ),\r\n//           req\r\n//         );\r\n//       }\r\n//       const absolutePromoImageUrl = makeAbsoluteUrl(promoImageUrl, protocol, host);\r\n//       if (!absolutePromoImageUrl) {\r\n//         console.log(\"‚ùå Failed to convert promoImageUrl to absolute URL:\", promoImageUrl);\r\n//         return withCORS(\r\n//           NextResponse.json(\r\n//             { success: false, message: \"Invalid promoImageUrl: could not convert to absolute URL\" },\r\n//             { status: 400 }\r\n//           ),\r\n//           req\r\n//         );\r\n//       }\r\n//       const promo = new Promo({\r\n//         promoImageUrl: absolutePromoImageUrl,\r\n//         isActive: !!isFeatured,\r\n//         contentType: \"image\",\r\n//         title: title && typeof title === \"string\" && title.trim() !== \"\" ? title.trim() : \"Promo Image\",\r\n//       });\r\n//       await promo.save();\r\n//       console.log(\"‚úÖ Promo added:\", promo._id, \"with URL:\", absolutePromoImageUrl);\r\n//       return withCORS(\r\n//         NextResponse.json({ success: true, message: \"Promo added successfully\", item: promo }, { status: 201 }),\r\n//         req\r\n//       );\r\n//     }\r\n//   } catch (error) {\r\n//     console.error(\"‚ùå POST Error:\", error);\r\n//     return withCORS(NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 }), req);\r\n//   }\r\n// }\r\n\r\n// export async function GET(req: NextRequest) {\r\n//   try {\r\n//     console.log(\"üìñ GET Books + Promo request\");\r\n//     await connectToDatabase();\r\n\r\n//     const { searchParams } = new URL(req.url);\r\n//     const purpose = searchParams.get(\"purpose\");\r\n//     const isFeatured = searchParams.get(\"featured\");\r\n//     const { protocol, host } = getBaseUrl(req);\r\n\r\n//     if (purpose === \"promo\") {\r\n//       const promoImages = await Promo.find({ isActive: true, promoImageUrl: { $ne: null }, contentType: \"image\" }).sort({ createdAt: -1 });\r\n//       const promoImagesWithFullUrl = promoImages\r\n//         .map((item: any) => {\r\n//           const promoImageUrl = makeAbsoluteUrl(item.promoImageUrl, protocol, host);\r\n//           if (!promoImageUrl) return null;\r\n//           return {\r\n//             _id: item._id,\r\n//             promoImageUrl,\r\n//             isActive: item.isActive,\r\n//             contentType: \"image\",\r\n//             title: item.title || \"Promo Image\",\r\n//           };\r\n//         })\r\n//         .filter((item: any) => item !== null);\r\n\r\n//       console.log(\"üñºÔ∏è Fetched\", promoImagesWithFullUrl.length, \"promo images\");\r\n//       return withCORS(NextResponse.json(promoImagesWithFullUrl, { status: 200 }), req);\r\n//     }\r\n\r\n//     const filter = isFeatured === \"true\" ? { isFeatured: true } : {};\r\n//     const books = await Book.find(filter).sort({ createdAt: -1 });\r\n//     const booksWithFullUrl = books.map((book: any) => {\r\n//       const bookObj = book.toObject();\r\n//       return {\r\n//         ...bookObj,\r\n//         imageUrl: makeAbsoluteUrl(bookObj.imageUrl, protocol, host),\r\n//         pdfUrl: makeAbsoluteUrl(bookObj.pdfUrl, protocol, host),\r\n//         contentType: \"book\",\r\n//       };\r\n//     });\r\n\r\n//     console.log(\"üìö Fetched\", booksWithFullUrl.length, \"books\");\r\n//     return withCORS(NextResponse.json(booksWithFullUrl, { status: 200 }), req);\r\n//   } catch (error) {\r\n//     console.error(\"‚ùå GET Error:\", error);\r\n//     return withCORS(NextResponse.json({ message: \"Server Error\" }, { status: 500 }), req);\r\n//   }\r\n// }\r\n\r\n// // ‚úÖ PUT handler for Admin Book/Promo Updates\r\n// export async function PUT(req: NextRequest) {\r\n//   try {\r\n//     console.log(\"‚úèÔ∏è PUT Admin Content request\")\r\n//     await connectToDatabase()\r\n\r\n//     const { searchParams } = new URL(req.url)\r\n//     const id = searchParams.get(\"id\")\r\n//     const contentType = searchParams.get(\"contentType\")\r\n\r\n//     // üî¥ Basic validation\r\n//     if (!id || !contentType || (contentType !== \"book\" && contentType !== \"image\")) {\r\n//       console.log(\"‚ùå Missing or invalid id/contentType\")\r\n//       const res = NextResponse.json({ success: false, message: \"Missing or invalid id/contentType\" }, { status: 400 })\r\n//       return withCORS(res, req)\r\n//     }\r\n\r\n//     const body = await req.json()\r\n//     const { protocol, host } = getBaseUrl(req)\r\n\r\n//     // üìö Update Book\r\n//     if (contentType === \"book\") {\r\n//       const { title, author, description, imageUrl, pdfUrl, isFeatured } = body\r\n\r\n//       const updatedBook = await Book.findByIdAndUpdate(\r\n//         id,\r\n//         {\r\n//           title,\r\n//           author,\r\n//           description,\r\n//           imageUrl: makeAbsoluteUrl(imageUrl, protocol, host),\r\n//           pdfUrl: makeAbsoluteUrl(pdfUrl, protocol, host),\r\n//           isFeatured: !!isFeatured,\r\n//           contentType: \"book\",\r\n//         },\r\n//         { new: true, runValidators: true }\r\n//       )\r\n\r\n//       if (!updatedBook) {\r\n//         console.log(\"‚ùå Book not found:\", id)\r\n//         const res = NextResponse.json({ success: false, message: \"Book not found\" }, { status: 404 })\r\n//         return withCORS(res, req)\r\n//       }\r\n\r\n//       console.log(\"‚úÖ Book updated:\", updatedBook._id)\r\n//       const res = NextResponse.json({ success: true, item: updatedBook }, { status: 200 })\r\n//       return withCORS(res, req)\r\n//     }\r\n\r\n//     // üñºÔ∏è Update Promo Image\r\n//     if (contentType === \"image\") {\r\n//       const { promoImageUrl, isFeatured } = body\r\n\r\n//       const updatedPromo = await Promo.findByIdAndUpdate(\r\n//         id,\r\n//         {\r\n//           promoImageUrl: makeAbsoluteUrl(promoImageUrl, protocol, host),\r\n//           isActive: !!isFeatured,\r\n//         },\r\n//         { new: true, runValidators: true }\r\n//       )\r\n\r\n//       if (!updatedPromo) {\r\n//         console.log(\"‚ùå Promo not found:\", id)\r\n//         const res = NextResponse.json({ success: false, message: \"Promo not found\" }, { status: 404 })\r\n//         return withCORS(res, req)\r\n//       }\r\n\r\n//       console.log(\"‚úÖ Promo updated:\", updatedPromo._id)\r\n//       const res = NextResponse.json({ success: true, item: updatedPromo }, { status: 200 })\r\n//       return withCORS(res, req)\r\n//     }\r\n\r\n//   } catch (error) {\r\n//     console.error(\"‚ùå PUT Admin Content Error:\", error)\r\n//     const res = NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 })\r\n//     return withCORS(res, req)\r\n//   }\r\n// }\r\n\r\n\r\n// // ‚úÖ DELETE handler\r\n// export async function DELETE(req: NextRequest) {\r\n//   try {\r\n//     console.log(\"üóëÔ∏è DELETE Admin Content request\")\r\n//     await connectToDatabase()\r\n//     const { searchParams } = new URL(req.url)\r\n//     const id = searchParams.get(\"id\")\r\n//     const contentType = searchParams.get(\"contentType\")\r\n//     if (!id || !contentType) {\r\n//       console.log(\"‚ùå Missing id or contentType for admin delete\")\r\n//       const res = NextResponse.json({ message: \"Missing id or contentType\" }, { status: 400 })\r\n//       return withCORS(res, req)\r\n//     }\r\n\r\n//     // üìö Handle Book Deletion (Admin Dashboard)\r\n//     if (contentType === \"book\") {\r\n//       console.log(\"üîç Deleting book with ID for admin:\", id)\r\n//       const deletedBook = await Book.findByIdAndDelete(id)\r\n//       if (!deletedBook) {\r\n//         console.log(\"‚ùå Book not found for admin:\", id)\r\n//         const res = NextResponse.json({ message: \"Book not found\" }, { status: 404 })\r\n//         return withCORS(res, req)\r\n//       }\r\n//       console.log(\"‚úÖ Book deleted successfully by admin:\", id)\r\n//       const res = NextResponse.json({ message: \"Book deleted successfully\" }, { status: 200 })\r\n//       return withCORS(res, req)\r\n//     }\r\n\r\n//     // üì∑ Handle Promo Deletion (Admin Dashboard)\r\n//     if (contentType === \"image\") {\r\n//       console.log(\"üîç Deleting promo with ID for admin:\", id)\r\n//       const deletedPromo = await Promo.findByIdAndDelete(id)\r\n//       if (!deletedPromo) {\r\n//         console.log(\"‚ùå Promo not found for admin:\", id)\r\n//         const res = NextResponse.json({ message: \"Promo not found\" }, { status: 404 })\r\n//         return withCORS(res, req)\r\n//       }\r\n//       console.log(\"‚úÖ Promo deleted successfully by admin:\", id)\r\n//       const res = NextResponse.json({ message: \"Promo deleted successfully\" }, { status: 200 })\r\n//       return withCORS(res, req)\r\n//     }\r\n\r\n//     // ‚ùå Invalid contentType\r\n//     console.log(\"‚ùå Invalid contentType for admin:\", contentType)\r\n//     const res = NextResponse.json({ message: \"Invalid contentType\" }, { status: 400 })\r\n//     return withCORS(res, req)\r\n//   } catch (error) {\r\n//     console.error(\"‚ùå DELETE Admin Content Error:\", error)\r\n//     const res = NextResponse.json({ message: \"Server Error\" }, { status: 500 })\r\n//     return withCORS(res, req)\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { NextRequest, NextResponse } from \"next/server\";\r\n// import { connectToDatabase } from \"@/lib/mongodb\";\r\n// import { Book } from \"../../../models/book\";\r\n// import { Promo } from \"../../../models/promoimage\";\r\n\r\n// const allowedOrigins = [\r\n//   \"https://frontend-rho-jet-76.vercel.app\",\r\n//   \"https://book-website-rho-sooty.vercel.app\",\r\n//   \"http://localhost:3000\",\r\n//   \"http://localhost:3001\",\r\n// ];\r\n\r\n// function getAllowOrigin(origin: string | null) {\r\n//   if (!origin) return \"\";\r\n//   if (process.env.NODE_ENV === \"development\") {\r\n//     console.log(\"üîß Dev mode - Allowing origin:\", origin);\r\n//     return origin;\r\n//   }\r\n//   if (allowedOrigins.includes(origin)) {\r\n//     console.log(\"‚úÖ Prod mode - Allowing origin:\", origin);\r\n//     return origin;\r\n//   }\r\n//   console.log(\"‚ùå Origin not allowed:\", origin);\r\n//   return \"\";\r\n// }\r\n\r\n// function withCORS(res: NextResponse, req: NextRequest) {\r\n//   const origin = req.headers.get(\"origin\");\r\n//   const allowOrigin = getAllowOrigin(origin);\r\n//   if (allowOrigin) {\r\n//     res.headers.set(\"Access-Control-Allow-Origin\", allowOrigin);\r\n//     res.headers.set(\"Vary\", \"Origin\");\r\n//   }\r\n//   res.headers.set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\r\n//   res.headers.set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n//   return res;\r\n// }\r\n\r\n// export async function POST(req: NextRequest) {\r\n//   try {\r\n//     console.log(\"üìñ Received POST request for book\")\r\n//     await connectToDatabase();\r\n\r\n//     const data = await req.json();\r\n//     const { contentType, title, author, description, imageUrl, pdfUrl, isFeatured } = data;\r\n\r\n//     if (contentType !== \"book\") {\r\n//       console.log(\"‚ùå Invalid contentType:\", contentType);\r\n//       return withCORS(\r\n//         NextResponse.json({ success: false, message: \"Invalid contentType: must be 'book'\" }, { status: 400 }),\r\n//         req\r\n//       );\r\n//     }\r\n\r\n//     if (!title || !author || !description || !imageUrl || !pdfUrl || isFeatured === undefined) {\r\n//       console.log(\"‚ùå Missing required book fields:\", { title, author, description, imageUrl, pdfUrl, isFeatured });\r\n//       return withCORS(\r\n//         NextResponse.json(\r\n//           { success: false, message: \"Missing required book fields: title, author, description, imageUrl, pdfUrl, isFeatured\" },\r\n//           { status: 400 }\r\n//         ),\r\n//         req\r\n//       );\r\n//     }\r\n\r\n//     // Explicitly exclude promoImageUrl\r\n//     if (\"promoImageUrl\" in data) {\r\n//       console.log(\"‚ùå promoImageUrl field detected in book data:\", data.promoImageUrl);\r\n//       delete data.promoImageUrl;\r\n//     }\r\n\r\n//     const book = new Book({\r\n//       contentType: \"book\",\r\n//       title: title.trim(),\r\n//       author: author.trim(),\r\n//       description: description.trim(),\r\n//       imageUrl: imageUrl.trim(),\r\n//       pdfUrl: pdfUrl.trim(),\r\n//       isFeatured: !!isFeatured,\r\n//     });\r\n//     await book.save();\r\n//     console.log(\"‚úÖ Book added:\", book._id);\r\n//     return withCORS(\r\n//       NextResponse.json({ success: true, message: \"Book added successfully\", item: book }, { status: 201 }),\r\n//       req\r\n//     );\r\n//   } catch (error) {\r\n//     console.error(\"‚ùå POST Error:\", error);\r\n//     return withCORS(NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 }), req);\r\n//   }\r\n// }\r\n\r\n// export async function OPTIONS(req: NextRequest) {\r\n//   console.log(\"üîÑ CORS Preflight request for Book Library\");\r\n//   const res = new NextResponse(null, { status: 204 });\r\n//   return withCORS(res, req);\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n// import { NextRequest, NextResponse } from \"next/server\";\r\n// import { connectToDatabase } from \"@/lib/mongodb\";\r\n// import { Book } from \"../../../models/books\";\r\n// import { Promo } from \"../../../models/promos\";\r\n\r\n// const allowedOrigins = [\r\n//   \"https://frontend-rho-jet-76.vercel.app\",\r\n//   \"https://book-website-rho-sooty.vercel.app\",\r\n//   \"http://localhost:3000\",\r\n//   \"http://localhost:3001\",\r\n// ];\r\n\r\n// function withCORS(res: NextResponse, req: NextRequest) {\r\n//   const origin = req.headers.get(\"origin\");\r\n//   if (origin && allowedOrigins.includes(origin) || process.env.NODE_ENV === \"development\") {\r\n//     res.headers.set(\"Access-Control-Allow-Origin\", origin!);\r\n//   }\r\n//   res.headers.set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\r\n//   res.headers.set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n//   return res;\r\n// }\r\n\r\n// export async function OPTIONS(req: NextRequest) {\r\n//   const res = new NextResponse(null, { status: 204 });\r\n//   return withCORS(res, req);\r\n// }\r\n\r\n// export async function POST(req: NextRequest) {\r\n//   try {\r\n//     await connectToDatabase();\r\n//     const data = await req.json();\r\n//     const { contentType, title, author, description, imageUrl, pdfUrl, isFeatured, promoImageUrl, isActive } = data;\r\n\r\n//     if (contentType === \"book\") {\r\n//       if (!title || !author || !description || !imageUrl || !pdfUrl) {\r\n//         return withCORS(NextResponse.json({ success: false, message: \"Missing required book fields\" }, { status: 400 }), req);\r\n//       }\r\n//       const book = new Book({\r\n//         title, author, description, imageUrl, pdfUrl, isFeatured, contentType: \"book\"\r\n//       });\r\n//       await book.save();\r\n//       return withCORS(NextResponse.json({ success: true, message: \"Book added successfully\", data: book }, { status: 201 }), req);\r\n//     }\r\n\r\n//     if (contentType === \"image\") {\r\n//       if (!promoImageUrl || isActive === undefined) {\r\n//         return withCORS(NextResponse.json({ success: false, message: \"Missing required promo fields\" }, { status: 400 }), req);\r\n//       }\r\n//       const promo = new Promo({\r\n//         promoImageUrl, isActive, contentType: \"image\", title\r\n//       });\r\n//       await promo.save();\r\n//       return withCORS(NextResponse.json({ success: true, message: \"Promo image added successfully\", data: promo }, { status: 201 }), req);\r\n//     }\r\n\r\n//     return withCORS(NextResponse.json({ success: false, message: \"Invalid content type\" }, { status: 400 }), req);\r\n//   } catch (error) {\r\n//     console.error(\"POST error:\", error);\r\n//     return withCORS(NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 }), req);\r\n//   }\r\n// }\r\n\r\n// // pages/api/booklibrary.ts\r\n// // ... imports aur baqi code\r\n// export const revalidate = 0; // Next.js ko cache rokne ke liye\r\n// export async function GET(req: NextRequest) {\r\n//   try {\r\n//     await connectToDatabase();\r\n    \r\n//     // Yahan books aur promos ko alag alag fetch kar rahe hain\r\n//     const books = await Book.find({});\r\n//     const promos = await Promo.find({});\r\n\r\n//     const allContent = [\r\n//       ...books.map(b => ({ ...b.toObject(), contentType: \"book\" })),\r\n//       ...promos.map(p => ({ ...p.toObject(), contentType: \"image\" })),\r\n//     ];\r\n\r\n//     // Data ko seedha return kar rahe hain\r\n//     return NextResponse.json(allContent, { status: 200 });\r\n//   } catch (error) {\r\n//     console.error(\"GET error:\", error);\r\n//     return NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 });\r\n//   }\r\n// }\r\n// export async function PUT(req: NextRequest) {\r\n//   try {\r\n//     await connectToDatabase();\r\n//     const { searchParams } = new URL(req.url);\r\n//     const id = searchParams.get(\"id\");\r\n//     const contentType = searchParams.get(\"contentType\");\r\n//     const data = await req.json();\r\n\r\n//     if (!id || !contentType) {\r\n//       return withCORS(NextResponse.json({ success: false, message: \"ID or contentType missing\" }, { status: 400 }), req);\r\n//     }\r\n\r\n//     if (contentType === \"book\") {\r\n//       const updatedBook = await Book.findByIdAndUpdate(id, data, { new: true });\r\n//       if (!updatedBook) {\r\n//         return withCORS(NextResponse.json({ success: false, message: \"Book not found\" }, { status: 404 }), req);\r\n//       }\r\n//       return withCORS(NextResponse.json({ success: true, message: \"Book updated\", data: updatedBook }, { status: 200 }), req);\r\n//     }\r\n    \r\n//     if (contentType === \"image\") {\r\n//       const updatedPromo = await Promo.findByIdAndUpdate(id, data, { new: true });\r\n//       if (!updatedPromo) {\r\n//         return withCORS(NextResponse.json({ success: false, message: \"Promo not found\" }, { status: 404 }), req);\r\n//       }\r\n//       return withCORS(NextResponse.json({ success: true, message: \"Promo updated\", data: updatedPromo }, { status: 200 }), req);\r\n//     }\r\n\r\n//     return withCORS(NextResponse.json({ success: false, message: \"Invalid content type\" }, { status: 400 }), req);\r\n//   } catch (error) {\r\n//     console.error(\"PUT error:\", error);\r\n//     return withCORS(NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 }), req);\r\n//   }\r\n// }\r\n\r\n// export async function DELETE(req: NextRequest) {\r\n//   try {\r\n//     await connectToDatabase();\r\n//     const { searchParams } = new URL(req.url);\r\n//     const id = searchParams.get(\"id\");\r\n//     const contentType = searchParams.get(\"contentType\");\r\n\r\n//     if (!id || !contentType) {\r\n//       return withCORS(NextResponse.json({ success: false, message: \"ID or contentType missing\" }, { status: 400 }), req);\r\n//     }\r\n\r\n//     if (contentType === \"book\") {\r\n//       const deletedBook = await Book.findByIdAndDelete(id);\r\n//       if (!deletedBook) {\r\n//         return withCORS(NextResponse.json({ success: false, message: \"Book not found\" }, { status: 404 }), req);\r\n//       }\r\n//       return withCORS(NextResponse.json({ success: true, message: \"Book deleted\" }, { status: 200 }), req);\r\n//     }\r\n\r\n//     if (contentType === \"image\") {\r\n//       const deletedPromo = await Promo.findByIdAndDelete(id);\r\n//       if (!deletedPromo) {\r\n//         return withCORS(NextResponse.json({ success: false, message: \"Promo not found\" }, { status: 404 }), req);\r\n//       }\r\n//       return withCORS(NextResponse.json({ success: true, message: \"Promo deleted\" }, { status: 200 }), req);\r\n//     }\r\n    \r\n//     return withCORS(NextResponse.json({ success: false, message: \"Invalid content type\" }, { status: 400 }), req);\r\n//   } catch (error) {\r\n//     console.error(\"DELETE error:\", error);\r\n//     return withCORS(NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 }), req);\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n// app/api/booklibrary/route.ts\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport mongoose, { Schema } from \"mongoose\";\r\n\r\n// --- Database Connection ---\r\nconst MONGODB_URI = process.env.MONGODB_URI;\r\n\r\nif (!MONGODB_URI) {\r\n    throw new Error(\"Please define the MONGODB_URI environment variable inside .env.local\");\r\n}\r\n\r\nlet cached = (global as any).mongoose || { conn: null, promise: null };\r\n\r\nasync function connectToDatabase() {\r\n    try {\r\n        if (cached.conn) {\r\n            return cached.conn;\r\n        }\r\n        if (!cached.promise) {\r\n            const opts = { bufferCommands: false };\r\n            cached.promise = mongoose.connect(MONGODB_URI!, opts).then(mongoose => mongoose);\r\n        }\r\n        cached.conn = await cached.promise;\r\n        return cached.conn;\r\n    } catch (error) {\r\n        console.error(\"‚ùå MongoDB connection error:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// --- Mongoose Models ---\r\nconst bookSchema = new Schema({\r\n    title: String,\r\n    author: String,\r\n    description: String,\r\n    imageUrl: String,\r\n    pdfUrl: String,\r\n    isFeatured: { type: Boolean, default: false },\r\n    contentType: { type: String, default: \"book\" }\r\n}, { timestamps: true, collection: \"books\" });\r\n\r\nconst promoSchema = new Schema({\r\n    promoImageUrl: { type: String, required: true },\r\n    isActive: { type: Boolean, default: true },\r\n    title: String,\r\n    contentType: { type: String, default: \"image\" }\r\n}, { timestamps: true, collection: \"promos\" });\r\n\r\nconst Book = mongoose.models.Book || mongoose.model(\"Book\", bookSchema);\r\nconst Promo = mongoose.models.Promo || mongoose.model(\"Promo\", promoSchema);\r\n\r\n\r\n// --- CORS Handler ---\r\nconst allowedOrigins = [\r\n    \"https://frontend-rho-jet-76.vercel.app\",\r\n    \"https://book-website-rho-sooty.vercel.app\",\r\n    \"http://localhost:3000\",\r\n    \"http://localhost:3001\",\r\n];\r\n\r\nfunction withCORS(res: NextResponse, req: NextRequest) {\r\n    const origin = req.headers.get(\"origin\");\r\n    if (origin && allowedOrigins.includes(origin) || process.env.NODE_ENV === \"development\") {\r\n        res.headers.set(\"Access-Control-Allow-Origin\", origin!);\r\n    }\r\n    res.headers.set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\r\n    res.headers.set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n    return res;\r\n}\r\n\r\n// --- API Routes ---\r\nexport const dynamic = 'force-dynamic';\r\n\r\nexport async function OPTIONS(req: NextRequest) {\r\n    const res = new NextResponse(null, { status: 204 });\r\n    return withCORS(res, req);\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n    try {\r\n        await connectToDatabase();\r\n        const data = await req.json();\r\n        const { contentType, title, author, description, imageUrl, pdfUrl, isFeatured, promoImageUrl, isActive } = data;\r\n\r\n        if (contentType === \"book\") {\r\n            if (!title || !author || !description || !imageUrl || !pdfUrl) {\r\n                return withCORS(NextResponse.json({ success: false, message: \"Missing required book fields\" }, { status: 400 }), req);\r\n            }\r\n            const book = new Book({\r\n                title, author, description, imageUrl, pdfUrl, isFeatured, contentType: \"book\"\r\n            });\r\n            await book.save();\r\n            return withCORS(NextResponse.json({ success: true, message: \"Book added successfully\", data: book }, { status: 201 }), req);\r\n        }\r\n\r\n        if (contentType === \"image\") {\r\n            if (!promoImageUrl || isActive === undefined) {\r\n                return withCORS(NextResponse.json({ success: false, message: \"Missing required promo fields\" }, { status: 400 }), req);\r\n            }\r\n            const promo = new Promo({\r\n                promoImageUrl, isActive, contentType: \"image\", title\r\n            });\r\n            await promo.save();\r\n            return withCORS(NextResponse.json({ success: true, message: \"Promo image added successfully\", data: promo }, { status: 201 }), req);\r\n        }\r\n\r\n        return withCORS(NextResponse.json({ success: false, message: \"Invalid content type\" }, { status: 400 }), req);\r\n    } catch (error) {\r\n        console.error(\"POST error:\", error);\r\n        return withCORS(NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 }), req);\r\n    }\r\n}\r\n\r\nexport async function GET(req: NextRequest) {\r\n    try {\r\n        await connectToDatabase();\r\n        const books = await Book.find({});\r\n        const promos = await Promo.find({});\r\n\r\n        const allContent = [\r\n            ...books.map(b => ({ ...b.toObject(), contentType: \"book\" })),\r\n            ...promos.map(p => ({ ...p.toObject(), contentType: \"image\" })),\r\n        ];\r\n\r\n        return withCORS(NextResponse.json(allContent, { status: 200 }), req);\r\n    } catch (error) {\r\n        console.error(\"GET error:\", error);\r\n        return withCORS(NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 }), req);\r\n    }\r\n}\r\n\r\nexport async function PUT(req: NextRequest) {\r\n    try {\r\n        await connectToDatabase();\r\n        const { searchParams } = new URL(req.url);\r\n        const id = searchParams.get(\"id\");\r\n        const contentType = searchParams.get(\"contentType\");\r\n        const data = await req.json();\r\n\r\n        if (!id || !contentType) {\r\n            return withCORS(NextResponse.json({ success: false, message: \"ID or contentType missing\" }, { status: 400 }), req);\r\n        }\r\n\r\n        if (contentType === \"book\") {\r\n            const updatedBook = await Book.findByIdAndUpdate(id, data, { new: true });\r\n            if (!updatedBook) {\r\n                return withCORS(NextResponse.json({ success: false, message: \"Book not found\" }, { status: 404 }), req);\r\n            }\r\n            return withCORS(NextResponse.json({ success: true, message: \"Book updated\", data: updatedBook }, { status: 200 }), req);\r\n        }\r\n        \r\n        if (contentType === \"image\") {\r\n            const updatedPromo = await Promo.findByIdAndUpdate(id, data, { new: true });\r\n            if (!updatedPromo) {\r\n                return withCORS(NextResponse.json({ success: false, message: \"Promo not found\" }, { status: 404 }), req);\r\n            }\r\n            return withCORS(NextResponse.json({ success: true, message: \"Promo updated\", data: updatedPromo }, { status: 200 }), req);\r\n        }\r\n\r\n        return withCORS(NextResponse.json({ success: false, message: \"Invalid content type\" }, { status: 400 }), req);\r\n    } catch (error) {\r\n        console.error(\"PUT error:\", error);\r\n        return withCORS(NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 }), req);\r\n    }\r\n}\r\n\r\nexport async function DELETE(req: NextRequest) {\r\n    try {\r\n        await connectToDatabase();\r\n        const { searchParams } = new URL(req.url);\r\n        const id = searchParams.get(\"id\");\r\n        const contentType = searchParams.get(\"contentType\");\r\n\r\n        if (!id || !contentType) {\r\n            return withCORS(NextResponse.json({ success: false, message: \"ID or contentType missing\" }, { status: 400 }), req);\r\n        }\r\n\r\n        if (contentType === \"book\") {\r\n            const deletedBook = await Book.findByIdAndDelete(id);\r\n            if (!deletedBook) {\r\n                return withCORS(NextResponse.json({ success: false, message: \"Book not found\" }, { status: 404 }), req);\r\n            }\r\n            return withCORS(NextResponse.json({ success: true, message: \"Book deleted\" }, { status: 200 }), req);\r\n        }\r\n\r\n        if (contentType === \"image\") {\r\n            const deletedPromo = await Promo.findByIdAndDelete(id);\r\n            if (!deletedPromo) {\r\n                return withCORS(NextResponse.json({ success: false, message: \"Promo not found\" }, { status: 404 }), req);\r\n            }\r\n            return withCORS(NextResponse.json({ success: true, message: \"Promo deleted\" }, { status: 200 }), req);\r\n        }\r\n        \r\n        return withCORS(NextResponse.json({ success: false, message: \"Invalid content type\" }, { status: 400 }), req);\r\n    } catch (error) {\r\n        console.error(\"DELETE error:\", error);\r\n        return withCORS(NextResponse.json({ success: false, message: \"Server error\" }, { status: 500 }), req);\r\n    }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}